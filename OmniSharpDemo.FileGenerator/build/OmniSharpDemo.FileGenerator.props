<Project>
    <UsingTask TaskName="FileGenerator" TaskFactory="CodeTaskFactory" AssemblyFile="$(RoslynCodeTaskFactory)" Condition=" '$(RoslynCodeTaskFactory)' != '' ">
        <ParameterGroup>
            <FilePath ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Text" />
            <Code Type="Fragment" Language="cs"><![CDATA[
                var buildNum = Environment.GetEnvironmentVariable("BUILD_NUMBER") ?? "unknown";
                var gitCommit = Environment.GetEnvironmentVariable("GIT_COMMIT") ?? "unknown";
                var gitBranch = Environment.GetEnvironmentVariable("GIT_BRANCH") ?? "unknown";
                
                Log.LogMessage(MessageImportance.Normal, $"Updating {FilePath} with build #{buildNum}, hash \"{gitCommit}\", branch \"{gitBranch}\".");
                
                var sb = new StringBuilder();
                sb.AppendLine("// ----------------------");
                sb.AppendLine("// <auto-generated>");
                sb.AppendLine("//     Any modifications to this file will be overwritten at build time.");
                sb.AppendLine("// </auto-generated>");
                sb.AppendLine("// ----------------------");
                sb.AppendLine();
                sb.AppendLine("#pragma warning disable");
                sb.AppendLine();
                sb.AppendLine("namespace OmniSharpDemo");
                sb.AppendLine("{");
                sb.AppendLine("    public class BuildInfo");
                sb.AppendLine("    {");
                sb.AppendLine($"        public string BuildNumber => \"{buildNum}\";");
                sb.AppendLine($"        public string GitCommit => \"{gitCommit}\";");
                sb.AppendLine($"        public string GitBranch => \"{gitBranch}\";");
                sb.AppendLine("    }");
                sb.AppendLine("}");
                sb.AppendLine();
                sb.AppendLine("#pragma warning restore");
                
                var newBuildInfoContents = sb.ToString();
                
                if(File.Exists(FilePath) && File.ReadAllText(FilePath) == newBuildInfoContents)
                {
                    Log.LogMessage(MessageImportance.Normal, "File contents unchanged; not updating.");
                }
                else
                {
                    File.WriteAllText(FilePath, newBuildInfoContents);
                }
            ]]></Code>
        </Task>
    </UsingTask>
</Project>
